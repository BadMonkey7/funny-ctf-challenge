'''
@author: badmonkey
@software: PyCharm
@file: exp.py
@time: 2020/11/14 上午11:20
'''
from Crypto.Util.number import *

n1 =0x9f53453bd0fd20a1b58fd58005085e32e1bfdf035bfbb1904ea67ea4236aa0133d5604e5cc22118b29bd487f00d4a093881498676328d5f23c84e5f0eb99dd84d9fa200aa833d3f101f1bd4e92cb6dc48770af655bbe98ae6b19d75face67f78fb1a8f2f1469546428ae5a7e991ec274d7728a614545731c37d29ca0364a36c7
e1=0x27eda2196
c1=0x32ed03619cf2ae42a634c4ad6650ca4f70e59dc1da708ddf783a07cc979371f95a903c654e2d50e0549f9a7d9adadf7e8946507e84ef82fe99630b8b694744ccd6070e77c437851b5ccee212525bbfb478005ba9bbc884f4cf764e559d6f32c08cd4b7265c38fd3bcabd4ce9bfe20480f42c874caf840cd4a9835f0c8436f94
n2=0x6d4195c69d1ea401fdbde5dd5d6c36347d2f584c5ea364a9de8613cb6452bf86297f9b5cbdf9c6e400bcee8b4c7b0da9d10c8952c16d9185f2b49b2fc18702856538f5d4d8f4bf51ce5b20b5416f075fbcdef0013c822be3727aca6ff5fddcf66d7b737c5549368fc256ba114f1a199850ef2c9e8f9586382b166bc23a8e1c4b
e2=0x50854b896
c2=0x6bc9869db69b6af921f47dc50a643f2db97a77193ec3d57b93e77b975a0b5470952138bdcf33515c43c12c2941d8b27f538ed43030e08a5a0fa626e8b96bde1aa73f7c53fb03109ecbdbc9f0933ebdd7fa07a7d04cd90568418d2cace61731bd6e71903bd995440aa5d9ed1fb1a6e4ae8641689083bead8dfa8ec09c8a300013

p1 = 9583093293507516226297895863295148413988566311417783458621813043124227065820832417558494048803579349862600677239329749603397957521604930479616085802071709
q1 = n1//p1

p2 = p1
q2 = n2//p2

assert isPrime(p2) and isPrime(q2) and p2*q2 == n2
assert isPrime(p1) and isPrime(q1) and p1*q1 == n1



phi1 = (p1-1)*(q1-1)
phi2 = (p2-1)*(q2-1)

# e*146018*d = 1 mod phi
# e1//146018  (146018*d)

assert GCD(e2,phi2)== 146018
assert GCD(e1,phi1)== 146018



bd1 = inverse(e1//2,q1-1)
bd2 = inverse(e2//2,q2-1)
m1 = pow(c1,bd1,q1)
m2 = pow(c2,bd2,q2)


def crt(ai, mi):
    a1, m1 = ai[0], mi[0]
    a2, m2 = ai[1], mi[1]
    return (a1 * inverse(m2, m1) * m2 + a2 * inverse(m1, m2) * m1) % (m1 * m2)


from gmpy2 import iroot
x = crt([m1,m2],[q1,q2])

print(long_to_bytes(iroot(x,2)[0]))



