'''
@author: badmonkey
@software: PyCharm
@file: exp.py
@time: 2020/12/8 下午12:55
'''
from pwn import *

LOCAL = 1
DEBUG = 1 # must open debug

filename = "./lemonade" # your file name

IP = "node3.buuoj.cn" # your ip
PORT = 9999 # your port

gdb.context.terminal = ["konsole","-e"]

if DEBUG:
    context.log_level = "debug"
elf = ELF(filename)
# logstream = open('log.txt',"w")

if LOCAL:
    sh = process(filename,stdin=PTY,raw=False)#,stdout=logstream )
else:
    sh = remote(IP,PORT)

import tty
sh.recvuntil(b'> ')
sh.sendline(b'1')
sh.recvline()
enc_flag = sh.recvline().strip().decode()
sh.recvuntil(b'> ')
sh.sendline(b'4')
sh.sendline(b'1')
sh.sendline(b'2')
sh.recvlines(4)
m1 = int(sh.recvline().strip().decode(),16)
print("m1 = ",m1)
sh.recvuntil(b'> ')
sh.sendline(b'2')
sh.send(chr(tty.CEOF))
# sh.recvuntil(b'> ')
sh.recvlines(2)
m2 = int(sh.recvline().strip().decode(),16)
print("m2 = ",m2)
sh.close()


from sympy.ntheory.modular import crt
from gmpy2 import iroot
e = 3
n1 = 14997542113406768800262678505698042231725368800111192297560877909705726911475152599429392736686969892190195670386428972855885315614329354858473477501508300293523006439107979887199071490028214205821218564924253328997461796380587296047470618750003565547785407726995876036010543676996107754948238641655104123670218140662697999823305269550762812223354423846152239470243995129752896219954738655329734481457632768847367494470259606805806899018576611686776852948262954595696659027752797538379698800803646301498698072329856608541154516867241749183948656225641988256738626835270975304771386823069129815908679173533537667236143
n2 = 12967959209067922454945251236897307909017233329152956123986340335469496214323692845445549614575661485498606365336104156968021893730938954455773203169332047024104889317141913384516037023463537387481180221013451642974120862473292679256290365788499008038196934935329279303392188972626528651856312570866775813560195950533727183158759728123282543351841799012242383408270806584497431938765912154113625657648218078384169657726055088022264250182646362174577072362455400480811157058303550311067133355599577710702917264938131011140879081322149967649896436577287555752517161823226931830440812245959346323636803069058207871186621

M = [n1,n2]
R = [m1,m2]
res = crt(M,R)

v6 = res[0]

message = hex(iroot(v6,3)[0])[2:]


def recover(message):
    table = list('0123456789abcdef')
    mess = list(message)
    seed = b''
    for i in range(32):
        h = table.index(mess[2*i])
        l = table.index(mess[2*i+1])
        seed += bytes([h*16+l])
    return seed

key = recover(message)




from Crypto.Cipher import AES

aes = AES.new(key,AES.MODE_ECB)

print(aes.decrypt(bytes.fromhex(enc_flag)))

